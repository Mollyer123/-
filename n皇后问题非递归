#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#define Max 100
static int count = 0;//静态变量用于统计个数
typedef struct
{
	int col[Max];//col[i]用来存放第i个皇后的列号
	int top;//栈顶指针
}StackType;//声明顺序栈类型
/*--------------------------------------------------------------------------------------*/
void dispasolution(StackType St)//输出一个解并表示
{
	
	printf("第%d个解：", ++count);
	for (int i = 1; i <= St.top; i++)
		printf("(%d,%d)", i, St.col[i]);
	printf("\n");
	for (int i = 1; i <=St.top; i++)        //行
	{
		for (int j = 1; j <= St.top; j++)    //列
		{
			if (St.col[i] != j)
				printf("x ");
			else
				printf("Q ");
		}
		printf("\n");
	}
}


bool place(StackType St, int k, int j)//测试（k,j）是否与已有皇后冲突
{
	int i = 1;
	if (k == 1)return true;//放第一个皇后时没有冲突
	while (i <= k - 1)//循环测试（k,j）是否与已有皇后冲突
	{
		if ((St.col[i] == j) || (abs(j - St.col[i]) == abs(i - k)))
		{
			return false;//有冲突
		}
		i++;
	}
	return true;//无冲突
}
void queen(int n)//求解n皇后问题
{
	int k;
	bool find;
	StackType St;
	St.top = 0;//初始化栈顶指针，为了让皇后从第一行开始
	St.top++; St.col[St.top] = 0;//从第一个皇后开始，初始列号为0
	while (St.top != 0)//栈不空的时候循环
	{
		k = St.top;//试探栈顶的第k个皇后
		find = false;//尚未找到第k个皇后的位置
		for(int j=St.col[k]+1;j<=n;j++)//为第k个皇后找一个合适的列号
			if (place(St, k, j))//在第k行找到一个皇后的位置
			{
				St.col[St.top] = j;//修改第k个皇后的位置
				find = true;//找到第k个皇后的位置
				break;//跳出for循环
			}
		if (find)
		{
			if (k == n)
				dispasolution(St);
			else//还有皇后未放时，将第k+1个皇后进栈
			{
				St.top++;
				St.col[St.top] = 0;
			}

		}
		else//若第k个皇后没有找到合适的位置，回溯
			St.top--;//即将第k个皇后退栈
	}

}
int main()
{
	int n;
	printf("皇后问题（n<20）n=");
	lable:scanf_s("%d", &n);
	
	if (n < 20)
	{
			while (n == 0 || n == 2 || n == 3)
			{
				printf("无解！请重新输入！\n");
				goto lable;
			}

			printf("%d皇后问题求解如下：\n", n);
			queen(n);
	}
	else
	{
			printf("n值太大，请重新输入！\n");
			goto lable;
	}
	
	system("PAUSE");
	return 0;
}
